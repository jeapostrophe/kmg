#lang kmg

; this example actually exhibits non-local continuations

; list number = unit + number × list number


; zero : number → bool (= unit + unit)
; prod : list number → number
(define prod
  ; `a` expects a number
  (⇐ a
     ; `b` expects a number
     (↓ a (fix f (⇐ b
                    ; produce pair of continuations to destruct list
                    ; 1. first should expect unit, the left inject
                    ;    extend a with function that, given unit, returns 1
                    (pair (↓ b (⇒ () 1))
                          ; 2. expects number × list number
                          ;    extend b with function as follows...
                          (↓ b (⇒ (pair x xs)
                                  ; c expects a number
                                  (↑ (⇐ c
                                        ; we need a pair of continuations, each of which expects unit
                                        ; 1. expect unit and return 0 to _a_ (an escape)
                                        (pair (↓ a (⇒ () 0))
                                              ; 2. expect unit and multiply x by recursive result
                                              (↓ c (⇒ () (↑ * (pair x (↑ f xs)))))))
                                     (↑ zero? x))))))))))

; once again I would like to factor out (↓ b ...) outside of (pair ...)

; β
(↑ (⇒ x x) e) = e
; βbar
(↓ c (⇐ y y)) = c

; η
(⇒ x (↑ f x)) = f
; if f doesn't mention x
; ηbar
(⇐ y (⇓ y f)) = f
; if f doesn't mention y

; I can't apply ηbar to reduce (⇐ a (↓ a f)) to f because f mentions a


; let's enrich it a bit.

; suppose I have

(data (Bool)
  (True)
  (False))

(data (List a)
  (Nil)
  (Cons a (List a)))

; then

(define prod
  (⇐ a
     (↓ a (fix f (⇐ b
                    (cocase (↓ b (⇒ (Nil) 1))
                            (↓ b (⇒ (Cons x xs)
                                    (↑ (⇐ c
                                          (cocase (↓ a (⇒ (True) 0))
                                                  (↓ c (⇒ (False) (↑ * (pair x (↑ f xs)))))))
                                       (↑ zero? x))))))))))

; cocase takes a continuation for each variant
